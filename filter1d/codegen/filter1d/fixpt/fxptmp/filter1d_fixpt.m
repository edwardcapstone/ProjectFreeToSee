%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 8.5 and Fixed-Point Designer 5.0           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [y_out, delayed_xout] = filter1d_fixpt(x_in, h_in1, h_in2, h_in3, h_in4)

% declare delay registers
fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);

persistent ud1 ud2 ud3 ud4 ud5 ud6 ud7 ud8;
if isempty(ud1)
    ud1 = fi(0, 1, 32, 30, fm); ud2 = fi(0, 1, 32, 30, fm); ud3 = fi(0, 1, 32, 30, fm); ud4 = fi(0, 1, 32, 30, fm); ud5 = fi(0, 1, 32, 30, fm); ud6 = fi(0, 1, 32, 30, fm); ud7 = fi(0, 1, 32, 30, fm); ud8 = fi(0, 1, 32, 30, fm);
end

% access the previous value of states/registers
a1 = fi(ud1 + ud8, 1, 32, 30, fm); a2 = fi(ud2 + ud7, 1, 32, 30, fm);
a3 = fi(ud3 + ud6, 1, 32, 30, fm); a4 = fi(ud4 + ud5, 1, 32, 30, fm);

% multiplier chain
m1 = fi(h_in1 * a1, 1, 32, 32, fm); m2 = fi(h_in2 * a2, 1, 32, 33, fm);
m3 = fi(h_in3 * a3, 1, 32, 32, fm); m4 = fi(h_in4 * a4, 1, 32, 31, fm);

% adder chain
a5 = fi(m1 + m2, 1, 32, 32, fm); a6 = fi(m3 + m4, 1, 32, 30, fm);

% filtered output
y_out = fi(a5 + a6, 1, 32, 30, fm);

% delayout input signal
delayed_xout = fi(ud8, 1, 32, 30, fm);

% update the delay line
ud8(:) = ud7; 
ud7(:) = ud6;
ud6(:) = ud5;
ud5(:) = ud4;
ud4(:) = ud3;
ud3(:) = ud2;
ud2(:) = ud1;
ud1(:) = x_in;

end

