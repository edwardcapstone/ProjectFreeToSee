-- -------------------------------------------------------------
-- 
-- File Name: /fs/student/dbreed/Desktop/DEMO/codegen/filter1d/hdlsrc/filter1d_fixpt.vhd
-- Created: 2016-03-28 15:05:12
-- 
-- Generated by MATLAB 8.5, MATLAB Coder 2.8 and HDL Coder 3.6
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- y_out                         ce_out        1
-- delayed_xout                  ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: filter1d_fixpt
-- Source Path: filter1d_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY filter1d_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in                              :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        h_in1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En33
        h_in2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En34
        h_in3                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En34
        h_in4                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En33
        ce_out                            :   OUT   std_logic;
        y_out                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        delayed_xout                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
        );
END filter1d_fixpt;


ARCHITECTURE rtl OF filter1d_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL h_in1_signed                     : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL x_in_signed                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud1                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud2                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud3                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud4                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud5                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud5_1                            : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud6                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud7                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ud8                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL h_in2_signed                     : signed(31 DOWNTO 0);  -- sfix32_En34
  SIGNAL h_in3_unsigned                   : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL h_in4_unsigned                   : unsigned(31 DOWNTO 0);  -- ufix32_En33
  SIGNAL a1                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL m1                               : signed(31 DOWNTO 0);  -- sfix32_En32
  SIGNAL p20m1_mul_temp                   : signed(63 DOWNTO 0);  -- sfix64_En63
  SIGNAL a2                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL m2                               : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL p21m2_mul_temp                   : signed(63 DOWNTO 0);  -- sfix64_En64
  SIGNAL a5                               : signed(31 DOWNTO 0);  -- sfix32_En32
  SIGNAL p24a5_add_cast                   : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL p24a5_add_cast_1                 : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL p24a5_add_temp                   : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL a3                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL m3                               : signed(31 DOWNTO 0);  -- sfix32_En32
  SIGNAL p22m3_cast                       : signed(32 DOWNTO 0);  -- sfix33_En34
  SIGNAL p22m3_mul_temp                   : signed(64 DOWNTO 0);  -- sfix65_En64
  SIGNAL p22m3_cast_1                     : signed(63 DOWNTO 0);  -- sfix64_En64
  SIGNAL a4                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL m4                               : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL p23m4_cast                       : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL p23m4_mul_temp                   : signed(64 DOWNTO 0);  -- sfix65_En63
  SIGNAL p23m4_cast_1                     : signed(63 DOWNTO 0);  -- sfix64_En63
  SIGNAL a6                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p25a6_add_cast                   : signed(33 DOWNTO 0);  -- sfix34_En32
  SIGNAL p25a6_add_cast_1                 : signed(33 DOWNTO 0);  -- sfix34_En32
  SIGNAL p25a6_add_temp                   : signed(33 DOWNTO 0);  -- sfix34_En32
  SIGNAL y_out_1                          : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p26y_out_add_cast                : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL p26y_out_add_cast_1              : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL p26y_out_add_temp                : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL tmp_1                            : signed(31 DOWNTO 0);  -- sfix32_En30

BEGIN
  h_in1_signed <= signed(h_in1);

  x_in_signed <= signed(x_in);

  enb <= clk_enable;

  ud1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud1 <= x_in_signed;
      END IF;
    END IF;
  END PROCESS ud1_reg_process;


  --HDL code generation from MATLAB function: filter1d_fixpt
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --           Generated by MATLAB 8.5 and Fixed-Point Designer 5.0           %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- declare delay registers
  -- access the previous value of states/registers
  tmp <= ud1;

  ud2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud2 <= ud1;
      END IF;
    END IF;
  END PROCESS ud2_reg_process;


  ud3_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud3 <= ud2;
      END IF;
    END IF;
  END PROCESS ud3_reg_process;


  ud4_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud4 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud4 <= ud3;
      END IF;
    END IF;
  END PROCESS ud4_reg_process;


  -- update the delay line
  ud5 <= ud4;

  ud5_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud5_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud5_1 <= ud5;
      END IF;
    END IF;
  END PROCESS ud5_reg_process;


  ud6_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud6 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud6 <= ud5_1;
      END IF;
    END IF;
  END PROCESS ud6_reg_process;


  ud7_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud7 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud7 <= ud6;
      END IF;
    END IF;
  END PROCESS ud7_reg_process;


  ud8_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ud8 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ud8 <= ud7;
      END IF;
    END IF;
  END PROCESS ud8_reg_process;


  h_in2_signed <= signed(h_in2);

  h_in3_unsigned <= unsigned(h_in3);

  h_in4_unsigned <= unsigned(h_in4);

  a1 <= tmp + ud8;

  -- multiplier chain
  p20m1_mul_temp <= h_in1_signed * a1;
  m1 <= p20m1_mul_temp(62 DOWNTO 31);

  a2 <= ud2 + ud7;

  p21m2_mul_temp <= h_in2_signed * a2;
  m2 <= p21m2_mul_temp(62 DOWNTO 31);

  -- adder chain
  p24a5_add_cast <= resize(m1 & '0', 34);
  p24a5_add_cast_1 <= resize(m2, 34);
  p24a5_add_temp <= p24a5_add_cast + p24a5_add_cast_1;
  a5 <= p24a5_add_temp(32 DOWNTO 1);

  a3 <= ud3 + ud6;

  p22m3_cast <= signed(resize(h_in3_unsigned, 33));
  p22m3_mul_temp <= p22m3_cast * a3;
  p22m3_cast_1 <= p22m3_mul_temp(63 DOWNTO 0);
  m3 <= p22m3_cast_1(63 DOWNTO 32);

  a4 <= ud4 + ud5_1;

  p23m4_cast <= signed(resize(h_in4_unsigned, 33));
  p23m4_mul_temp <= p23m4_cast * a4;
  p23m4_cast_1 <= p23m4_mul_temp(63 DOWNTO 0);
  m4 <= p23m4_cast_1(63 DOWNTO 32);

  p25a6_add_cast <= resize(m3, 34);
  p25a6_add_cast_1 <= resize(m4 & '0', 34);
  p25a6_add_temp <= p25a6_add_cast + p25a6_add_cast_1;
  a6 <= p25a6_add_temp(33 DOWNTO 2);

  -- filtered output
  p26y_out_add_cast <= resize(a5, 35);
  p26y_out_add_cast_1 <= resize(a6 & '0' & '0', 35);
  p26y_out_add_temp <= p26y_out_add_cast + p26y_out_add_cast_1;
  y_out_1 <= p26y_out_add_temp(33 DOWNTO 2);

  y_out <= std_logic_vector(y_out_1);

  -- delayout input signal
  tmp_1 <= ud8;

  delayed_xout <= std_logic_vector(tmp_1);

  ce_out <= clk_enable;

END rtl;
